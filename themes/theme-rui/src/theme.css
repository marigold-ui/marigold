@import './utils.css';

/*
    TODO: how to do normalization so we doesn't break everything?
    TODO: omit "background" in the naming convention? (https://ui.shadcn.com/docs/theming#convention)
    TODO: create component styles files and compile to CSS classes?
*/

/*
    - create tokens if we think:
        - it is necessary for a component
        - it can be used by other teams (if they build their own component)
*/

/*
 think about leaving `-background` for token values, because e.g. border-destructive, or 
 text-destructive like used in inputs
*/

@plugin "tailwindcss-react-aria-components";
@plugin "tailwindcss-animate";

@theme static {
  --font-sans: Inter, system-ui, sans-serif;
  --font-sans-variable: InterVariable, Inter, system-ui, sans-serif;

  /* orange (use for accent) */
  --color-orange-50: #fff9ed;
  --color-orange-100: #fff1d5;
  --color-orange-200: #fedfaa;
  --color-orange-300: #fdc774;
  --color-orange-400: #fba43c;
  --color-orange-500: #f98e22;
  --color-orange-600: #ea6d0c;
  --color-orange-700: #c2520c;
  --color-orange-800: #9a4112;
  --color-orange-900: #7c3712;
  --color-orange-950: #431a07;

  --color-background: var(--color-white);
  --color-foreground: var(--color-stone-950);

  /* stone (use for brand) */
  --color-brand: var(--color-stone-950);
  --color-brand-foreground: var(--color-stone-50);

  /* used for hovering (e.g. calendar, button) */
  --color-hover: var(--color-stone-100);
  --color-hover-foreground: var(--color-stone-900);

  /* stone (use for secondary) */
  --color-secondary: var(--color-stone-50);
  --color-secondary-foreground: var(--color-stone-950);

  /* accent colors used for highlighting certain parts of components */

  /* used for errormessage, button */
  --color-destructive: var(--color-red-600);
  --color-destructive-foreground: var(--color-white);

  /* muted variant of destructive for badge */
  --color-destructive-muted-accent: var(--color-red-600);
  --color-destructive-muted: var(--color-red-100);
  --color-destructive-muted-foreground: var(--color-red-950);

  /* used for success elements, like icons */
  --color-success: var(--color-green-500);
  --color-success-foreground: var(--color-white);

  /* muted variant of success token, used in badge */
  --color-success-muted-accent: var(--color-green-600);
  --color-success-muted: var(--color-green-100);
  --color-success-muted-foreground: var(--color-green-950);

  /* used for warning elements, like icons */
  --color-warning: var(--color-yellow-400);
  --color-warning-foreground: var(--color-white);

  /* muted variant of warning token, used in badge */
  --color-warning-muted-accent: var(--color-yellow-600);
  --color-warning-muted: var(--color-yellow-100);
  --color-warning-muted-foreground: var(--color-yellow-950);

  /* used for info elements, like icons */
  --color-info: var(--color-blue-500);
  --color-info-foreground: var(--color-white);

  /* muted variant of info token, used in badge */
  --color-info-muted-accent: var(--color-blue-600);
  --color-info-muted: var(--color-blue-100);
  --color-info-muted-foreground: var(--color-blue-950);

  /* 
    muted colors are desaturated colors of the brand color,
    they help create hierarchy for secondary text. 
    Currently used for: helptext, icons inside inputs, readonly background inside inputs, variant for text 
  */
  --color-muted: var(--color-stone-100);
  --color-muted-foreground: var(--color-stone-500);

  --color-disabled: var(--color-stone-200);
  --color-disabled-foreground: var(--color-stone-400);

  /* used for placeholder color */
  --color-placeholder: var(--color-stone-500);
  /* used for outline/border as ring*/
  --color-ring: var(--color-stone-400);

  /* used for link */
  --color-link: var(--color-blue-600);

  /* Input tokens */
  /* color input used for inputs as border or e.g. in switch as bg track color */
  --color-input: var(--color-stone-300);

  /* TODO: Rename them to "component"? */
  /* component height for input elements */
  --spacing-input: 2.25rem;
  /* component height for button elements */
  --spacing-button: 2.25rem;
  --spacing-button-small: 2rem;
  --spacing-button-large: 2.5rem;

  --color-border: var(--color-stone-200);

  /* Focus color is used for focusing an element (e.g. segment on Datefield)*/
  --color-focus: var(--color-stone-100);

  /* Selected color is used when there is an active selection in the component */
  --color-selected: var(--color-stone-100);

  /* ==================== */
  /*        SURFACE       */
  /* ==================== */
  --surface-sunken: var(--color-muted);
  --surface-sunken-shadow: 0 0 #0000;

  --surface-body: var(--color-background);
  --surface-body-shadow: 0 0 #0000;

  --surface-raised: var(--color-background);
  --surface-raised-shadow: var(--shadow-xs);
  --surface-raised-border: var(--color-input);

  --surface-overlay: var(--color-background);
  --surface-overlay-shadow: var(--shadow-lg);
  --surface-overlay-border: var(--color-input);

  /* ==================== */
  /*       ANIMATION      */
  /* ==================== */

  /* easing functions (https://gist.github.com/bendc/ac03faac0bf2aee25b49e5fd260a727d)*/
  --ease-out-quad: cubic-bezier(0.25, 0.46, 0.45, 0.94);
  --ease-out-cubic: cubic-bezier(0.215, 0.61, 0.355, 1);
  --ease-out-quart: cubic-bezier(0.165, 0.84, 0.44, 1);
  --ease-out-quint: cubic-bezier(0.23, 1, 0.32, 1);
  --ease-out-expo: cubic-bezier(0.19, 1, 0.22, 1);
  --ease-out-circ: cubic-bezier(0.075, 0.82, 0.165, 1);

  --ease-in-out-quad: cubic-bezier(0.455, 0.03, 0.515, 0.955);
  --ease-in-out-cubic: cubic-bezier(0.645, 0.045, 0.355, 1);
  --ease-in-out-quart: cubic-bezier(0.77, 0, 0.175, 1);
  --ease-in-out-quint: cubic-bezier(0.86, 0, 0.07, 1);
  --ease-in-out-expo: cubic-bezier(1, 0, 0, 1);
  --ease-in-out-circ: cubic-bezier(0.785, 0.135, 0.15, 0.86);

  --ease-in-quad: cubic-bezier(0.55, 0.085, 0.68, 0.53);
  --ease-in-cubic: cubic-bezier(0.55, 0.055, 0.675, 0.19);
  --ease-in-quart: cubic-bezier(0.895, 0.03, 0.685, 0.22);
  --ease-in-quint: cubic-bezier(0.755, 0.05, 0.855, 0.06);
  --ease-in-expo: cubic-bezier(0.95, 0.05, 0.795, 0.035);
  --ease-in-circ: cubic-bezier(0.6, 0.04, 0.98, 0.335);

  --fade-in-duration: 0.25s;
  --fade-out-duration: 0.15s;

  --animate-fade-in: fade-in var(--fade-in-duration) var(--ease-out-cubic);
  --animate-fade-out: fade-in var(--fade-out-duration) reverse;

  @keyframes fade-in {
    from {
      opacity: 0;
      filter: blur(6px);
    }
    to {
      opacity: 1;
      filter: blur(0);
    }
  }

  --animate-fade-in-up: fade-in-up var(--fade-in-duration) var(--ease-out-cubic);

  @keyframes fade-in-up {
    from {
      opacity: 0;
      transform: translateY(15px);
      filter: blur(6px);
    }
    to {
      opacity: 1;
      transform: translateY(0);
      filter: blur(0);
    }
  }

  /* animation slide in */
  --slide-in-duration: 0.3s;
  --slide-out-duration: 0.15s;

  --animate-slide-in-right: slide-in-right var(--slide-in-duration)
    var(--ease-out-expo);
  --animate-slide-out-right: slide-in-right var(--slide-out-duration) reverse;

  @keyframes slide-in-right {
    from {
      transform: translateX(100%);
    }

    to {
      transform: translateX(0);
    }
  }

  /* animation and keyframes */
  --animate-rotate-spinner: rotate-spinner 2s linear infinite;
  --animate-progress-cycle: progress-cycle 1.5s linear infinite;

  @keyframes rotate-spinner {
    0% {
      transform: rotate(0deg);
    }

    100% {
      transform: rotate(360deg);
    }
  }

  @keyframes progress-cycle {
    0% {
      transform: rotate(0deg);
      stroke-dashoffset: 75;
    }

    30% {
      stroke-dashoffset: 20;
    }

    100% {
      transform: rotate(360deg);
      stroke-dashoffset: 75;
    }
  }
}
