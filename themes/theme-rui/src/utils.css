/*
 * Custom Tailwind utilities
 *
 * This file contains reusable utility functions and class shortcuts that
 * encapsulate common design decisions across the theme. These include
 * standardized styling for interactive states like keyboard focus, disabled
 * components, and other consistent UI patterns.
 */

/*
 * Applies a consistent visual style for keyboard focus states across components.
 * This utility sets a colored focus ring and border based on the given theme color,
 * while removing the default outline.
 *
 * Use this as a default for all components (that don't have their own border).
 */
@utility util-focus-* {
  border-color: --value(--color- *);
  outline-style: none;

  --tw-ring-color: --alpha(--value(--color- *) / 50%);
  --tw-ring-shadow: 0 0 0 3px var(--tw-ring-color, currentcolor);
  box-shadow:
    var(--tw-inset-shadow), var(--tw-inset-ring-shadow),
    var(--tw-ring-offset-shadow), var(--tw-ring-shadow), var(--tw-shadow);
}

/*
 * Applies a consistent visual style for keyboard focus states across components.
 * This utility sets a colored focus ring based on the given theme color,
 * while removing the default outline.
 *
 * Use this when the component has its own border and you need to keep it.
 */
@utility util-focus-borderless-* {
  outline-style: none;

  --tw-ring-color: --alpha(--value(--color- *) / 50%);
  --tw-ring-shadow: 0 0 0 3px var(--tw-ring-color, currentcolor);
  box-shadow:
    var(--tw-inset-shadow), var(--tw-inset-ring-shadow),
    var(--tw-ring-offset-shadow), var(--tw-ring-shadow), var(--tw-shadow);
}

/*
 * Defines a consistent visual and behavioral style for disabled UI elements.
 */
@utility util-disabled {
  background-color: var(--color-disabled);
  color: var(--color-disabled-foreground);

  cursor: not-allowed;

  --tw-border-style: none;
  border-style: none;

  --tw-shadow: 0 0 #0000;
  box-shadow:
    var(--tw-inset-shadow), var(--tw-inset-ring-shadow),
    var(--tw-ring-offset-shadow), var(--tw-ring-shadow), var(--tw-shadow);
}

/*
 * These utility classes define visual surfaces with distinct background colors and 
 * elevation levels. Elevation is conveyed through shadows and borders, helping establish 
 * depth, hierarchy, and separation between interface layers. Use them to apply 
 * consistent surface styling across components.
 */
@utility util-surface-sunken {
  background: var(--surface-sunken);

  --tw-shadow: var(--surface-sunken-shadow);
  box-shadow:
    var(--tw-inset-shadow), var(--tw-inset-ring-shadow),
    var(--tw-ring-offset-shadow), var(--tw-ring-shadow), var(--tw-shadow);
}

@utility util-surface-body {
  background: var(--surface-body);

  --tw-shadow: var(--surface-body-shadow);
  box-shadow:
    var(--tw-inset-shadow), var(--tw-inset-ring-shadow),
    var(--tw-ring-offset-shadow), var(--tw-ring-shadow), var(--tw-shadow);
}

@utility util-surface-raised {
  background: var(--surface-raised);
  border: 1px var(--tw-border-style) var(--surface-raised-border);

  --tw-shadow: var(--surface-raised-shadow);
  box-shadow:
    var(--tw-inset-shadow), var(--tw-inset-ring-shadow),
    var(--tw-ring-offset-shadow), var(--tw-ring-shadow), var(--tw-shadow);
}

@utility util-surface-overlay {
  background: var(--surface-overlay);
  border: 1px var(--tw-border-style) var(--surface-overlay-border);

  --tw-shadow: var(--surface-overlay-shadow);
  box-shadow:
    var(--tw-inset-shadow), var(--tw-inset-ring-shadow),
    var(--tw-ring-offset-shadow), var(--tw-ring-shadow), var(--tw-shadow);
}
